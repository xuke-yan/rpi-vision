---
# - name: "Install Python 3.6 on Raspberry Pi"
#   hosts: "{{ RPI_HOSTNAME  | default('raspberrypi.local')}}"
#   gather_facts: false
#   vars:
#     python_version: "{{PYTHON_VERSION | default('3.6.5')}}"
#     threads: 4
#   tasks:
#     - name: "python{{python_version}}  runtime&build dependencies"
#       become: yes
#       apt:
#         name: ['build-essential', 'tk-dev', 'libncurses5-dev', 'libncursesw5-dev', 'libreadline6-dev', 'libdb5.3-dev', 'libgdbm-dev']
#     - name: "Download python{{python_version}}"
#       get_url:
#         url: "https://www.python.org/ftp/python/{{python_version}} /Python-{{python_version}} .tar.xz"
#         dest: "/tmp/Python-{{python_version}}.tar.xz"
#     - name: "Unarchive python{{python_version}}"
#       unarchive:
#         src: "/tmp/Python-{{python_version}}.tar.xz"
#         dest: "/tmp/"
#         copy: no
#         creates: "/tmp/Python-{{python_version}}"
#     - name: "configure python{{python_version}}  build"
#       command: ./configure
#       args:
#         chdir: "/tmp/Python-{{python_version}}"
#         creates: "/tmp/Python-{{python_version}}/Makefile"
#     - name: "build python{{python_version}}"
#       # not using make module to be able to use -j and creates option to fully skip step
#       command: make -j{{threads}}
#       args:
#         chdir: "/tmp/Python-{{python_version}}"
#         creates: "/tmp/Python-{{python_version}}/python"
#     - name: "install python{{python_version}}"
#       become: yes
#       shell: "make altinstall"
#       args:
#         chdir: "/tmp/Python-{{python_version}}"
#         creates: /usr/local/bin/python3.6
- name: "Install dependencies and configure Raspberry Pi for use with rpi-vision examples"
  hosts: "rpi_vision"
  gather_facts: false
  vars:
    rpi_vision_dir: "{{ RPI_VISION_DIR | default('/home/pi/rpi-vision') }}"
    fbcp_dir: "{{ FBCP_DIR | default('/home/pi/rpi-fbcp') }}"
    tft_driver_dir: "{{TFT_DRIVER_DIR | default('/home/pi/lcd-show')}}"
    tft_driver_install_script: "{{TFT_DRIVER_INSTALL_SCRIPT | default('LCD35-show')}}"
  tasks:
    - name: "Install platform dependencies"
      become: yes
      apt:
        name: ['tmux']
    - name: "Clone rpi-vision"
      git:
        repo: 'https://github.com/xuke-yan/rpi-vision.git'
        dest: "{{ rpi_vision_dir }}"
        version: "{{ VERSION | default('release-v1.0.0')}}"
#    - name: "Clone rpi-fbcp"
#      git:
#        repo: "https://github.com/tasanakorn/rpi-fbcp.git"
#        dest: "{{ fbcp_dir }}"
#        version: master
#    - name: "Clone TFT drivers"
#      git:
#        repo: "https://github.com/goodtft/LCD-show.git"
#        dest: "{{ tft_driver_dir }}"
#    - name: "Copy TFT driver install script to /usr/local/bin"
#      become: True
#      shell: cp {{ tft_driver_dir }}/{{tft_driver_install_script}} /usr/local/bin/{{tft_driver_install_script}} && chmod +x /usr/local/bin/{{tft_driver_install_script}}
#      args:
#        creates: /usr/local/bin/{{tft_driver_install_script}}
#    - file:
#        path: "{{ FBCP_DIR | default('/home/pi/rpi-fbcp')}}/build"
#        state: directory
#    - name: "Build fbcp (frame buffer copy for Raspberry Pi)"
#      shell: "cmake .. && make"
#      ignore_errors: true
#      args:
#        creates: fbcp
#        chdir: "{{ FBCP_DIR | default('/home/pi/rpi-fbcp')}}/build"
#    - name: "Copy fbcp to /usr/local/bin"
#      become: True
#      shell: cp fbcp /usr/local/bin && chmod +x /usr/local/bin/fbcp
#      args:
#        creates: /usr/local/bin/fbcp
#        chdir: "{{ FBCP_DIR | default('/home/pi/rpi-fbcp')}}/build"
#    - name: "Install TFT drivers"
#      become: True
#      command: /usr/local/bin/{{tft_driver_install_script}}
#      args:
#        creates: /home/pi/.tft_screen_installed
#      async: 60
#      poll: 0
#      register: tft_install_output
#    - name: "Waiting for TFT driver installation to finish (Pi Rebooting)"
#      wait_for_connection:
#        delay: 1
#        sleep: 10
#        timeout: 300
#      when: tft_install_output is changed
#    - name: "Create .tft_screen_installed"
#      when: tft_install_output is changed
#      copy:
#        content: "/usr/local/bin/{{tft_driver_install_script}}"
#        dest: /home/pi/.tft_screen_installed
    - name: Create virtual environment
      shell: virtualenv -p $(which python3.6) .venv
      args:
        creates: "{{rpi_vision_dir}}/.venv"
        chdir: "{{rpi_vision_dir}}"
    - pip:
        name: "."
        chdir: "{{rpi_vision_dir}}"
        extra_args: "-e"   # this creates a link rather then copying the files
        virtualenv: "{{rpi_vision_dir}}/.venv"


